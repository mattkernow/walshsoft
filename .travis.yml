sudo: false

# Cache Gcloud SDK between commands
cache:
  directories:
    - "$HOME/google-cloud-sdk/"

services:
  - docker

env:
  global:
    - GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json
    - PROJECT_NAME=walshsoft-218612
    - CLUSTER_NAME=walshsoft-cluster
    - CLOUDSDK_COMPUTE_ZONE=europe-north1-a
    - NGINX_DOCKER_IMAGE_NAME=nginx
    - WEB_DOCKER_IMAGE_NAME=web
    - KUBE_DEPLOYMENT_NAME=walshsoft-service
    - KUBE_DEPLOYMENT_CONTAINER_NAME=appexample

script:
  # Only build if its not the "development" branch
  - |
    if [ $TRAVIS_BRANCH != "development" ]; then
      echo "BUILDING APP IMAGES"

      echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json
      gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      gcloud auth configure-docker
      gcloud --quiet config set project $PROJECT_NAME
      gcloud --quiet config set container/cluster $CLUSTER_NAME
      gcloud --quiet config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
      gcloud --quiet container clusters get-credentials $CLUSTER_NAME

      docker build --quiet -t gcr.io/${PROJECT_NAME}/${WEB_DOCKER_IMAGE_NAME}:$TRAVIS_COMMIT web/
      docker build --quiet -t gcr.io/${PROJECT_NAME}/${NGINX_DOCKER_IMAGE_NAME}:$TRAVIS_COMMIT nginx/
    fi
  # Pull built image to reduce build time when developing CI
  - |
    TAG=$TRAVIS_COMMIT
    if [[ $TRAVIS_BRANCH == "development" && $TRAVIS_PULL_REQUEST == "false" ]]; then
        echo "DEVELOPMENT - SKIPPING DOCKER BUILD"
        TAG="916cc6e9855d07bb4a1111512a1277695654e897"
    fi

# Run unit tests
  - docker run --rm --name unit gcr.io/${PROJECT_NAME}/${WEB_DOCKER_IMAGE_NAME}:$TAG /bin/sh -c "python manage.py test postcode_api/tests/tests_unit"
  # Run integration tests against docker host
  - docker run --name web -d gcr.io/${PROJECT_NAME}/${WEB_DOCKER_IMAGE_NAME}:$TAG /bin/sh -c "gunicorn walshsoft.wsgi:application --bind :8000"
  - docker run --rm --name integration --env POSTCODE_HOST=web gcr.io/${PROJECT_NAME}/${WEB_DOCKER_IMAGE_NAME}:$TAG /bin/sh -c "find / -name tests_integration -type d && pytest /code/postcode_api/tests/tests_integration"

before_deploy:
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - gcloud --quiet version
  - gcloud --quiet components update
  - gcloud --quiet components update kubectl

deploy:
  - provider: script
    script: ./devops/deploy.sh
    skip_cleanup: true
    on:
      branch: master
